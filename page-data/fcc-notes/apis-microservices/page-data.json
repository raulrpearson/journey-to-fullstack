{"componentChunkName":"component---src-components-layout-jsx","path":"/fcc-notes/apis-microservices","webpackCompilationHash":"65627bb980c34939f462","result":{"data":{"mdx":{"id":"cd0ac103-61a9-5c13-bbcb-a3a5db626171","fields":{"title":"freeCodeCamp's APIs and Microservices Certification","slug":"/fcc-notes/apis-microservices"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"freeCodeCamp's APIs and Microservices Certification\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"APIs and Microservices Certification\"), mdx(\"p\", null, \"This are my notes. They're not meant to be exhaustive, just to include the\\nthings that I found new or interesting.\"), mdx(\"h2\", null, \"Managing packages with NPM\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Use \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"~\"), \" tilde to allow patch version updates. Use \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"^\"), \" caret to allow minor\\n(and patch) version updates. Since minor versions shouldn't break API, using\\ncaret is the default behavior when installing packages.\")), mdx(\"h2\", null, \"Basic Node and Express\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Express provides routing capabilities like so \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"app.METHOD(PATH, HANDLER)\"), \". For\\nexample: \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"app.get('/', (req, res) => res.send('Hi!'))\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"In Node.js,\\n\", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://nodejs.org/docs/latest/api/modules.html#modules_dirname\"\n  }), mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"__dirname\")), \"\\nis the directory name of the current module. It's required for example with\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"res.sendFile\"), \".\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"In Express, you add middleware with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"app.use(...)\"), \". Middleware functions\\nintercept requests at specified routes in order to introduce some desired\\nprocessing or side-effects.\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"An interesting middleware is \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"express.static(<path>)\"), \" to serve static assets\\non a given path.\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Middleware functions take 3 arguments: the request object, the response\\nobject, and the next function in the application\\u2019s request-response cycle.\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Middleware can be mounted on a specific route and can also be chained within a\\nroute definition.\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"req.params\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"req.query\"), \" for input taken out of the URL.\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"A syntax that allows you to chain different verb handlers on the same path\\nroute: \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"app.route(<path>).get(<handler>).post(<handler>)\")))));\n}\n;\nMDXContent.isMDXComponent = true;","headings":[{"value":"APIs and Microservices Certification","depth":1},{"value":"Managing packages with NPM","depth":2},{"value":"Basic Node and Express","depth":2}]}},"pageContext":{"isCreatedByStatefulCreatePages":false,"id":"cd0ac103-61a9-5c13-bbcb-a3a5db626171"}}}