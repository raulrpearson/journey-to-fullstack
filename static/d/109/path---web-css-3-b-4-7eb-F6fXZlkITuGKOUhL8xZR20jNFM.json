{"data":{"mdx":{"id":"191a1277-c0c7-5cf3-a3aa-45d8e0867e73","fields":{"title":"CSS","slug":"/web/css"},"code":{"body":"function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nconst layoutProps = {};\nreturn class MDXContent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.layout = null;\n  }\n\n  render() {\n    const _this$props = this.props,\n          {\n      components\n    } = _this$props,\n          props = _objectWithoutProperties(_this$props, [\"components\"]);\n\n    return React.createElement(MDXTag, {\n      name: \"wrapper\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"h2\",\n      components: components\n    }, `Links`), React.createElement(MDXTag, {\n      name: \"ul\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"li\",\n      components: components,\n      parentName: \"ul\"\n    }, React.createElement(MDXTag, {\n      name: \"p\",\n      components: components,\n      parentName: \"li\"\n    }, `A CSS-Tricks roundup of `, React.createElement(MDXTag, {\n      name: \"a\",\n      components: components,\n      parentName: \"p\",\n      props: {\n        \"href\": \"https://css-tricks.com/pseudo-element-roundup/\"\n      }\n    }, `use cases for\npseudo-elements`))), React.createElement(MDXTag, {\n      name: \"li\",\n      components: components,\n      parentName: \"ul\"\n    }, React.createElement(MDXTag, {\n      name: \"p\",\n      components: components,\n      parentName: \"li\"\n    }, React.createElement(MDXTag, {\n      name: \"a\",\n      components: components,\n      parentName: \"p\",\n      props: {\n        \"href\": \"https://cssreference.io/\"\n      }\n    }, `cssreference.io`), ` is a free visual guide to CSS. It\nfeatures the most popular properties, and explains them with illustrated and\nanimated examples.`))), React.createElement(MDXTag, {\n      name: \"h2\",\n      components: components\n    }, `Drawing with CSS`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"a\",\n      components: components,\n      parentName: \"p\",\n      props: {\n        \"href\": \"https://twitter.com/DesignJokes\"\n      }\n    }, `Wenting Zhang`), ` has this great video where she\ngives an `, React.createElement(MDXTag, {\n      name: \"a\",\n      components: components,\n      parentName: \"p\",\n      props: {\n        \"href\": \"https://www.youtube.com/watch?v=mNKz3devFAw\"\n      }\n    }, `introduction to drawing with\nCSS`), `. She created an `, React.createElement(MDXTag, {\n      name: \"a\",\n      components: components,\n      parentName: \"p\",\n      props: {\n        \"href\": \"https://cssicon.space/\"\n      }\n    }, `icon set in\nCSS`), `, which doubles as a great learning resource.`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `She mentions that she decided to create CSS Icon because she wanted to leverage\nCSS animations. What I don't understand about the whole drawing with CSS\nmovement is why not use SVG instead.`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `I looked into this because I had been seeing many examples of people drawing\namazing things on CodePen using CSS. I was blown away by this `, React.createElement(MDXTag, {\n      name: \"a\",\n      components: components,\n      parentName: \"p\",\n      props: {\n        \"href\": \"https://codepen.io/collection/DrwLdN\"\n      }\n    }, `Simpson's\ncollection`), `.`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"a\",\n      components: components,\n      parentName: \"p\",\n      props: {\n        \"href\": \"https://leaverou.github.io/css3patterns/\"\n      }\n    }, `CSS3 Patterns Gallery`), ` is a great\nresource to learn how to produce CSS-only background and filler patterns. Great\nfor mastering the `, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `background`), ` property, CSS gradients and the creative use of\ncolor and transparency.`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"a\",\n      components: components,\n      parentName: \"p\",\n      props: {\n        \"href\": \"https://cssbattle.dev/\"\n      }\n    }, `CSSBattle`), `. CSS code-golfing. Replicate targets with\nthe smallest possible code. It's great deliberate practice although only for a\nsubset of CSS. You also won't be using in production many of the tricks and\nhacks that you'll learn to keep the code small, but it's a lot of fun and it\nwill get you to master positioning, pseudo-elements, backgrounds, borders,\nbox-shadows and many others.`), React.createElement(MDXTag, {\n      name: \"h2\",\n      components: components\n    }, `CSS-in-JS`), React.createElement(MDXTag, {\n      name: \"ul\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"li\",\n      components: components,\n      parentName: \"ul\"\n    }, `Chris Biscardi provides a nice set of ideas on the topic of `, React.createElement(MDXTag, {\n      name: \"a\",\n      components: components,\n      parentName: \"li\",\n      props: {\n        \"href\": \"https://www.christopherbiscardi.com/post/styles-and-naming\"\n      }\n    }, `naming and\nstructuring\ncomponents`), ` using\nEmotion.`)), React.createElement(MDXTag, {\n      name: \"h2\",\n      components: components\n    }, `Using system fonts`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `Triggered by `, React.createElement(MDXTag, {\n      name: \"a\",\n      components: components,\n      parentName: \"p\",\n      props: {\n        \"href\": \"https://bitsofco.de/the-new-system-font-stack/\"\n      }\n    }, `\"The New System Font\nStack?\"`), `, I decided to look into\nusing that on my web projects. That article suggests using the following\nsnippet:`), React.createElement(MDXTag, {\n      name: \"pre\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"code\",\n      components: components,\n      parentName: \"pre\",\n      props: {\n        \"className\": \"language-css\"\n      }\n    }, `body {\n  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto,\n    Oxygen-Sans, Ubuntu, Cantarell, 'Helvetica Neue', sans-serif;\n}\n`)), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `That's from September 2016, inspired by WordPress 4.6, so it's a bit out of\ndate. In September 2017, CSS-Tricks provides a similar stack but gives this\nwarning:`), React.createElement(MDXTag, {\n      name: \"blockquote\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"p\",\n      components: components,\n      parentName: \"blockquote\"\n    }, `This method should only be used on the font-family property instead of the\nfont shorthand. Booking.com published a thorough write-up on the warnings it\ngenerates due to the leading font appearing to be a vendor prefix.`)), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `They also mention an alternative interesting strategy, using `, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `@font-face`), `:`), React.createElement(MDXTag, {\n      name: \"pre\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"code\",\n      components: components,\n      parentName: \"pre\",\n      props: {\n        \"className\": \"language-css\"\n      }\n    }, `/* Define the \"system\" font family */\n@font-face {\n  font-family: system;\n  font-style: normal;\n  font-weight: 300;\n  src: local('.SFNSText-Light'), local('.HelveticaNeueDeskInterface-Light'),\n    local('.LucidaGrandeUI'), local('Ubuntu Light'), local('Segoe UI Light'),\n    local('Roboto-Light'), local('DroidSans'), local('Tahoma');\n}\n\n/* Now, let's apply it on an element */\nbody {\n  font-family: 'system';\n}\n`)), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `Using the\n`, React.createElement(MDXTag, {\n      name: \"a\",\n      components: components,\n      parentName: \"p\",\n      props: {\n        \"href\": \"https://github.com/jonathantneal/system-font-css/blob/gh-pages/system-font.css\"\n      }\n    }, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"a\"\n    }, `system-font.css`)), `\nyou can use eight variations of the system-ui font family; light (300) light\nitalic, normal (400), normal italic, medium (500), medium italic, bold (700),\nand bold italic. Like this:`), React.createElement(MDXTag, {\n      name: \"pre\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"code\",\n      components: components,\n      parentName: \"pre\",\n      props: {\n        \"className\": \"language-css\"\n      }\n    }, `body {\n  font-family: system-ui;\n}\n\nblockquote {\n  font: italic 300 system-ui;\n}\n\np {\n  font: 400 system-ui;\n}\n`)), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `Note that in the previous two cases, the font faces `, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `system`), ` and `, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `system-ui`), `\nwere being defined in the accompanying CSS. On the other hand, `, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `system-ui`), ` was\nadded as a possible value for the `, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `font-family`), ` property in CSS. It seems\n`, React.createElement(MDXTag, {\n      name: \"a\",\n      components: components,\n      parentName: \"p\",\n      props: {\n        \"href\": \"https://caniuse.com/#feat=font-family-system-ui\"\n      }\n    }, `decently supported`), `.`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `It seems appropriate to use `, React.createElement(MDXTag, {\n      name: \"a\",\n      components: components,\n      parentName: \"p\",\n      props: {\n        \"href\": \"https://furbo.org/2018/03/28/system-fonts-in-css/\"\n      }\n    }, `the\nfollowing`), `:`), React.createElement(MDXTag, {\n      name: \"pre\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"code\",\n      components: components,\n      parentName: \"pre\",\n      props: {\n        \"className\": \"language-css\"\n      }\n    }, `font-family: system-ui, -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto',\n  'Oxygen', 'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue', sans-serif;\n`)), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `But `, React.createElement(MDXTag, {\n      name: \"a\",\n      components: components,\n      parentName: \"p\",\n      props: {\n        \"href\": \"https://infinnie.github.io/blog/2017/systemui.html\"\n      }\n    }, `this`), `, so W(ho)TF\nknows. I just checked Bootstrap and they use this:`), React.createElement(MDXTag, {\n      name: \"pre\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"code\",\n      components: components,\n      parentName: \"pre\",\n      props: {\n        \"className\": \"language-css\"\n      }\n    }, `font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica\nNeue', Arial, 'Noto Sans', sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe\nUI Symbol', 'Noto Color Emoji';\n`)), React.createElement(MDXTag, {\n      name: \"h2\",\n      components: components\n    }, `Loading fonts`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `To read: `, React.createElement(MDXTag, {\n      name: \"a\",\n      components: components,\n      parentName: \"p\",\n      props: {\n        \"href\": \"https://developers.google.com/web/fundamentals/performance/optimizing-content-efficiency/webfont-optimization\"\n      }\n    }, `Web Font\nOptimization`), `.`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"a\",\n      components: components,\n      parentName: \"p\",\n      props: {\n        \"href\": \"https://medium.com/clio-calliope/making-google-fonts-faster-aadf3c02a36d\"\n      }\n    }, `This\narticle`), `\ngives a great overview of strategies to improve the loading of Google Fonts.\nSome of the tips apply to fonts in general.`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `We typically load Google Fonts by adding this piece of markup:`), React.createElement(MDXTag, {\n      name: \"pre\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"code\",\n      components: components,\n      parentName: \"pre\",\n      props: {\n        \"className\": \"language-html\"\n      }\n    }, `<link\n  href=\"https://fonts.googleapis.com/css?family=Muli:400\"\n  rel=\"stylesheet\"\n/>\n`)), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `That returns a stylesheet full of `, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `@font-face`), ` declarations like this one:`), React.createElement(MDXTag, {\n      name: \"pre\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"code\",\n      components: components,\n      parentName: \"pre\",\n      props: {\n        \"className\": \"language-css\"\n      }\n    }, `@font-face {\n  font-family: 'Muli';\n  font-style: normal;\n  font-weight: 400;\n  src: local('Muli Regular'), local('Muli-Regular'),\n    url(https://fonts.gstatic.com/s/muli/v12/7Auwp_0qiz-afTzGLQjUwkQ1OQ.woff2)\n      format('woff2');\n  unicode-range: U+0100-024F, U+0259, U+1E00-1EFF, U+2020, U+20A0-20AB,\n    U+20AD-20CF, U+2113, U+2C60-2C7F, U+A720-A7FF;\n}\n`)), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `This tries to load fonts locally if they're available, before going to\n`, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `fonts.gstatic.com`), `. That's not too bad, specially considering that Google's\nsevers are good, but we have a couple of problems with this approach:`), React.createElement(MDXTag, {\n      name: \"ol\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"li\",\n      components: components,\n      parentName: \"ol\"\n    }, React.createElement(MDXTag, {\n      name: \"p\",\n      components: components,\n      parentName: \"li\"\n    }, `We're performing a minimum of 2 separate requests to different hosts -\nfirst for the stylesheet at `, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `fonts.googleapis.com`), `, and then to a unique URL\nfor each font hosted at `, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `fonts.gstatic.com`), `.`)), React.createElement(MDXTag, {\n      name: \"li\",\n      components: components,\n      parentName: \"ol\"\n    }, React.createElement(MDXTag, {\n      name: \"p\",\n      components: components,\n      parentName: \"li\"\n    }, `We have no control over flash-of-invisible-text (FOIT) and\nflash-of-unstyled-text (FOUT) while fonts are loading. Setting the\n`, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `font-display`), ` property in the `, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `@font-face`), ` would give us that control, but\nit’s defined in the Google Fonts stylesheet.`)), React.createElement(MDXTag, {\n      name: \"li\",\n      components: components,\n      parentName: \"ol\"\n    }, React.createElement(MDXTag, {\n      name: \"p\",\n      components: components,\n      parentName: \"li\"\n    }, `Finally, while rare, if Google Fonts is down, we won’t get our fonts. If our\nown CDN is down, then at least we are consistently delivering nothing to our\nusers, right?`))), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `Two strategies are suggested. At the very least, warm up the DNS lookup, TCP\nhandshake, and TLS negotiation to `, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `fonts.gstatic.com`), ` with `, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `preconnect`), `:`), React.createElement(MDXTag, {\n      name: \"pre\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"code\",\n      components: components,\n      parentName: \"pre\",\n      props: {\n        \"className\": \"language-html\"\n      }\n    }, `<link rel=\"preconnect\" href=\"https://fonts.gstatic.com/\" crossorigin />\n<link\n  href=\"https://fonts.googleapis.com/css?family=Muli:400\"\n  rel=\"stylesheet\"\n/>\n`)), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `Alternatively, self-host. Use\n`, React.createElement(MDXTag, {\n      name: \"a\",\n      components: components,\n      parentName: \"p\",\n      props: {\n        \"href\": \"https://google-webfonts-helper.herokuapp.com/fonts\"\n      }\n    }, `google-webfonts-helper`), ` and\nfollow instructions.`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `“Modern Browsers” will give you WOFF and WOFF2 formats while “Best Support” will\nalso give you TTF, EOT, and SVG. A reasonable option is to chose to only host\nWOFF and WOFF2 while selecting system fonts as fallbacks for older browsers.`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `In your pages, use `, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `preload`), ` for fonts that you're sure you'll be using:\n\"Preload is a declarative fetch, allowing you to force the browser to make a\nrequest for a resource without blocking the document’s onload event.\" (`, React.createElement(MDXTag, {\n      name: \"a\",\n      components: components,\n      parentName: \"p\",\n      props: {\n        \"href\": \"https://medium.com/reloading/preload-prefetch-and-priorities-in-chrome-776165961bbf\"\n      }\n    }, `Preload,\nPrefetch And Priorities in\nChrome`), `).`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `All the browsers that support `, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `preload`), ` also support WOFF2 so we can safely\nchoose only WOFF2.`), React.createElement(MDXTag, {\n      name: \"pre\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"code\",\n      components: components,\n      parentName: \"pre\",\n      props: {\n        \"className\": \"language-html\"\n      }\n    }, `<link\n  rel=\"preload\"\n  as=\"font\"\n  type=\"font/woff2\"\n  href=\"./fonts/muli-v12-latin-regular.woff2\"\n  crossorigin\n/>\n\n<link\n  rel=\"preload\"\n  as=\"font\"\n  type=\"font/woff2\"\n  href=\"./fonts/muli-v12-latin-700.woff2\"\n  crossorigin\n/>\n`)), React.createElement(MDXTag, {\n      name: \"ul\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"li\",\n      components: components,\n      parentName: \"ul\"\n    }, React.createElement(MDXTag, {\n      name: \"p\",\n      components: components,\n      parentName: \"li\"\n    }, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `rel=\"preload\"`), ` tells the browser to declaratively fetch the resource but not\n“execute” it (our CSS will queue usage).`)), React.createElement(MDXTag, {\n      name: \"li\",\n      components: components,\n      parentName: \"ul\"\n    }, React.createElement(MDXTag, {\n      name: \"p\",\n      components: components,\n      parentName: \"li\"\n    }, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `as=\"font\"`), ` tells the browser what it will be downloading so that it can set\nan appropriate priority. Without it, the browser would set a default low\npriority.`)), React.createElement(MDXTag, {\n      name: \"li\",\n      components: components,\n      parentName: \"ul\"\n    }, React.createElement(MDXTag, {\n      name: \"p\",\n      components: components,\n      parentName: \"li\"\n    }, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `type=\"font/woff2`), ` tells the browser the file type so that it only downloads\nthe resource if it supports that file type.`)), React.createElement(MDXTag, {\n      name: \"li\",\n      components: components,\n      parentName: \"ul\"\n    }, React.createElement(MDXTag, {\n      name: \"p\",\n      components: components,\n      parentName: \"li\"\n    }, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `crossorigin`), ` is required because fonts are fetched using anonymous mode CORS.`))), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `If you’re okay with FOUT, or flash of unstyled text, then we can fix FOIT by\nadding `, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `font-display: swap;`), ` to our `, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `@font-face`), ` declarations. More info in `, React.createElement(MDXTag, {\n      name: \"a\",\n      components: components,\n      parentName: \"p\",\n      props: {\n        \"href\": \"https://font-display.glitch.me/\"\n      }\n    }, `this\nglitch`), `. It explains the use of the\n`, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `font-display`), ` property:`), React.createElement(MDXTag, {\n      name: \"ul\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"li\",\n      components: components,\n      parentName: \"ul\"\n    }, React.createElement(MDXTag, {\n      name: \"p\",\n      components: components,\n      parentName: \"li\"\n    }, `Font loading follows three stages: block, swap, failure.`)), React.createElement(MDXTag, {\n      name: \"li\",\n      components: components,\n      parentName: \"ul\"\n    }, React.createElement(MDXTag, {\n      name: \"p\",\n      components: components,\n      parentName: \"li\"\n    }, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `font-display`), ` is applied per font-face.`)), React.createElement(MDXTag, {\n      name: \"li\",\n      components: components,\n      parentName: \"ul\"\n    }, React.createElement(MDXTag, {\n      name: \"p\",\n      components: components,\n      parentName: \"li\"\n    }, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `font-display: block`), ` produces FOIT but is good in cases where your font\nbranding is important and you don't want people to see you site with fallback\nfonts.`)), React.createElement(MDXTag, {\n      name: \"li\",\n      components: components,\n      parentName: \"ul\"\n    }, React.createElement(MDXTag, {\n      name: \"p\",\n      components: components,\n      parentName: \"li\"\n    }, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `font-display: swap`), ` produces FOUT, the text is shown immediately in the\nfallback font until the custom font loads.`)), React.createElement(MDXTag, {\n      name: \"li\",\n      components: components,\n      parentName: \"ul\"\n    }, React.createElement(MDXTag, {\n      name: \"p\",\n      components: components,\n      parentName: \"li\"\n    }, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `font-display: fallback`), ` somewhere in between block and swap. The text is\ninvisible for a short period of time (100ms). Then if the custom font hasn't\ndownloaded, the text is shown in a fallback font (for about 3s), then swapped\nafter the custom font loads.`)), React.createElement(MDXTag, {\n      name: \"li\",\n      components: components,\n      parentName: \"ul\"\n    }, React.createElement(MDXTag, {\n      name: \"p\",\n      components: components,\n      parentName: \"li\"\n    }, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `font-display: optional`), ` like fallback but the browser can decide to not use\nthe custom font at all, based on the user's connection speed.`))), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"a\",\n      components: components,\n      parentName: \"p\",\n      props: {\n        \"href\": \"https://github.com/Munter/subfont\"\n      }\n    }, `subfont`), ` is a command line tool to optimize\nyour webfont loading. Aggressive subsetting based on your font use, self-hosting\nof Google fonts and preloading. If you're cool, you use Gatsby and life's good:\nthere's `, React.createElement(MDXTag, {\n      name: \"a\",\n      components: components,\n      parentName: \"p\",\n      props: {\n        \"href\": \"https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-plugin-subfont\"\n      }\n    }, `a plugin for\nthat`), `.`));\n  }\n\n}\nMDXContent.isMDXComponent = true;"},"headings":[{"value":"Links","depth":2},{"value":"Drawing with CSS","depth":2},{"value":"CSS-in-JS","depth":2},{"value":"Using system fonts","depth":2},{"value":"Loading fonts","depth":2}]}},"pageContext":{"id":"191a1277-c0c7-5cf3-a3aa-45d8e0867e73"}}