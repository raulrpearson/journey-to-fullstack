{"data":{"mdx":{"id":"64df915a-4086-5151-81fc-f7a2795c9625","fields":{"title":"Node.js","slug":"/programming/nodejs"},"code":{"body":"function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nconst layoutProps = {};\nreturn class MDXContent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.layout = null;\n  }\n\n  render() {\n    const _this$props = this.props,\n          {\n      components\n    } = _this$props,\n          props = _objectWithoutProperties(_this$props, [\"components\"]);\n\n    return React.createElement(MDXTag, {\n      name: \"wrapper\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"h1\",\n      components: components\n    }, `Node.js`), React.createElement(MDXTag, {\n      name: \"h2\",\n      components: components\n    }, `Environment variables`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"a\",\n      components: components,\n      parentName: \"p\",\n      props: {\n        \"href\": \"https://medium.com/the-node-js-collection/making-your-node-js-work-everywhere-with-environment-variables-2da8cdf6e786\"\n      }\n    }, `This\narticle`), `\nmakes a case for environment variables.`), React.createElement(MDXTag, {\n      name: \"h3\",\n      components: components\n    }, `Why?`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `Because they externalize all environment specific aspects of your app and\nkeep your app encapsulated. Now you can run your app anywhere by modifying the\nenvironment variables `, React.createElement(MDXTag, {\n      name: \"em\",\n      components: components,\n      parentName: \"p\"\n    }, `without changing your code and without rebuilding it`), `!`), React.createElement(MDXTag, {\n      name: \"h3\",\n      components: components\n    }, `When?`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `Some examples:`), React.createElement(MDXTag, {\n      name: \"ul\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"li\",\n      components: components,\n      parentName: \"ul\"\n    }, `Which HTTP port to listen on`), React.createElement(MDXTag, {\n      name: \"li\",\n      components: components,\n      parentName: \"ul\"\n    }, `What path and folder your files are located in, that you want to serve`), React.createElement(MDXTag, {\n      name: \"li\",\n      components: components,\n      parentName: \"ul\"\n    }, `Pointing to a development, staging, test, or production database`), React.createElement(MDXTag, {\n      name: \"li\",\n      components: components,\n      parentName: \"ul\"\n    }, `URLs to server resources`), React.createElement(MDXTag, {\n      name: \"li\",\n      components: components,\n      parentName: \"ul\"\n    }, `CDNs for testing vs. production`), React.createElement(MDXTag, {\n      name: \"li\",\n      components: components,\n      parentName: \"ul\"\n    }, `Even a marker to label your app in the UI by the environment it lives in`)), React.createElement(MDXTag, {\n      name: \"h3\",\n      components: components\n    }, `How?`), React.createElement(MDXTag, {\n      name: \"ul\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"li\",\n      components: components,\n      parentName: \"ul\"\n    }, `Using the local environment (duh) and/or command line. We're talking about\n`, React.createElement(MDXTag, {\n      name: \"em\",\n      components: components,\n      parentName: \"li\"\n    }, `environment`), ` variables, after all. They could be present in memory as part of\nthe execution context or you can pass them through the command line. Assuming\nyou use bash:`)), React.createElement(MDXTag, {\n      name: \"pre\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"code\",\n      components: components,\n      parentName: \"pre\",\n      props: {\n        \"className\": \"language-bash\"\n      }\n    }, `PORT=8626 node server.js\n`)), React.createElement(MDXTag, {\n      name: \"ul\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"li\",\n      components: components,\n      parentName: \"ul\"\n    }, `Using .env file. Keeps things tidy and convenient and avoids typing mistakes.\nI also think the previous solution has a higher risk of leaking data to the\nenvironment. When you add a variable to bash, other processes might be able to\naccess that value. When you use dotenv, I think the variables are attached to\nyour application process and can only be seen by it.`)), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `In any case, just use dotenv. Add your `, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `.env`), ` file to your `, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `.gitignore`), ` and you\nalso have a convenient way of keeping your secrets accessible and (somewhat)\nprotected.`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `Read the `, React.createElement(MDXTag, {\n      name: \"a\",\n      components: components,\n      parentName: \"p\",\n      props: {\n        \"href\": \"https://www.npmjs.com/package/dotenv\"\n      }\n    }, `dotenv docs`), ` for details on how\nto use it. I've seen two different ways of accessing values:`), React.createElement(MDXTag, {\n      name: \"ol\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"li\",\n      components: components,\n      parentName: \"ol\"\n    }, `Using the dot notation: `, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"li\"\n    }, `process.env.PORT`)), React.createElement(MDXTag, {\n      name: \"li\",\n      components: components,\n      parentName: \"ol\"\n    }, `Using the bracket notation: `, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"li\"\n    }, `process.env['PORT']`))), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `I'm assuming they're equivalent and who cares, but I like bracket notation\nbetter. It would make it easier to use them programmatically like this:`), React.createElement(MDXTag, {\n      name: \"pre\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"code\",\n      components: components,\n      parentName: \"pre\",\n      props: {\n        \"className\": \"language-javascript\"\n      }\n    }, `const keys = ['PORT', 'ENDPOINT', 'SECRET'];\nfor (key of keys) {\n  let value = process.env[key];\n  // do something with value\n}\n`)), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `For consistency, why not use that notation everywhere.`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `Also follow the recommendation of a single .env file per environment. From `, React.createElement(MDXTag, {\n      name: \"a\",\n      components: components,\n      parentName: \"p\",\n      props: {\n        \"href\": \"http://12factor.net/config\"\n      }\n    }, `The\nTwelve-Factor App`), `:`), React.createElement(MDXTag, {\n      name: \"blockquote\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"p\",\n      components: components,\n      parentName: \"blockquote\"\n    }, `In a twelve-factor app, env vars are granular controls, each fully orthogonal\nto other env vars. They are never grouped together as “environments”, but\ninstead are independently managed for each deploy. This is a model that scales\nup smoothly as the app naturally expands into more deploys over its lifetime.`)));\n  }\n\n}\nMDXContent.isMDXComponent = true;"},"headings":[{"value":"Node.js","depth":1},{"value":"Environment variables","depth":2},{"value":"Why?","depth":3},{"value":"When?","depth":3},{"value":"How?","depth":3}]}},"pageContext":{"id":"64df915a-4086-5151-81fc-f7a2795c9625"}}