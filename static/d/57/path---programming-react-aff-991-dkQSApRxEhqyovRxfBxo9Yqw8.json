{"data":{"mdx":{"id":"b6e82fcf-7c5f-5a8b-a417-7d87e77751b8","fields":{"title":"React","slug":"/programming/react"},"code":{"body":"function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nconst layoutProps = {};\nreturn class MDXContent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.layout = null;\n  }\n\n  render() {\n    const _this$props = this.props,\n          {\n      components\n    } = _this$props,\n          props = _objectWithoutProperties(_this$props, [\"components\"]);\n\n    return React.createElement(MDXTag, {\n      name: \"wrapper\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"h1\",\n      components: components\n    }, `React`), React.createElement(MDXTag, {\n      name: \"ul\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"li\",\n      components: components,\n      parentName: \"ul\"\n    }, `Read through the `, React.createElement(MDXTag, {\n      name: \"a\",\n      components: components,\n      parentName: \"li\",\n      props: {\n        \"href\": \"https://reactjs.org/docs/getting-started.html\"\n      }\n    }, `docs`)), React.createElement(MDXTag, {\n      name: \"li\",\n      components: components,\n      parentName: \"ul\"\n    }, React.createElement(MDXTag, {\n      name: \"a\",\n      components: components,\n      parentName: \"li\",\n      props: {\n        \"href\": \"https://overreacted.io/\"\n      }\n    }, `Dan Abramov's blog`), ` is amazing.`), React.createElement(MDXTag, {\n      name: \"li\",\n      components: components,\n      parentName: \"ul\"\n    }, `Build a CLI application using `, React.createElement(MDXTag, {\n      name: \"a\",\n      components: components,\n      parentName: \"li\",\n      props: {\n        \"href\": \"https://github.com/vadimdemedes/ink\"\n      }\n    }, `Ink`), `.`), React.createElement(MDXTag, {\n      name: \"li\",\n      components: components,\n      parentName: \"ul\"\n    }, `Check out `, React.createElement(MDXTag, {\n      name: \"a\",\n      components: components,\n      parentName: \"li\",\n      props: {\n        \"href\": \"https://preactjs.com/\"\n      }\n    }, `Preact`), `.`)), React.createElement(MDXTag, {\n      name: \"h2\",\n      components: components\n    }, `React as a UI runtime`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `Dan Abramov posted this `, React.createElement(MDXTag, {\n      name: \"a\",\n      components: components,\n      parentName: \"p\",\n      props: {\n        \"href\": \"https://overreacted.io/react-as-a-ui-runtime/\"\n      }\n    }, `great overview of\nReact`), `.`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `Some programs output numbers. Other programs output poems. Different languages\nand their runtimes are often optimized for a particular set of use cases, and\nReact is no exception to that.`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"strong\",\n      components: components,\n      parentName: \"p\"\n    }, `React programs usually output a tree that may change over time`), `. Let's call\nthis the host tree, because it's part of the host environment, like DOM or iOS.\nIt usually has it's own imperative API (`, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `appendChild()`), ` in DOM, for example).`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `React can be more performant by assuming that the host tree is `, React.createElement(MDXTag, {\n      name: \"em\",\n      components: components,\n      parentName: \"p\"\n    }, `stable`), ` (not\nchanging too much over time) and `, React.createElement(MDXTag, {\n      name: \"em\",\n      components: components,\n      parentName: \"p\"\n    }, `regular`), ` (can be broken down in components an\npatterns). In the case of most UIs, these reasonable assumptions are correct.`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `A `, React.createElement(MDXTag, {\n      name: \"em\",\n      components: components,\n      parentName: \"p\"\n    }, `host instance`), ` is a node in the `, React.createElement(MDXTag, {\n      name: \"em\",\n      components: components,\n      parentName: \"p\"\n    }, `host tree`), `. Host instances have properties\nand can have other host instances as children. As mentioned above, there usually\nexists an API to manipulate these host instances.`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `A `, React.createElement(MDXTag, {\n      name: \"em\",\n      components: components,\n      parentName: \"p\"\n    }, `renderer`), ` teaches React to talk to a specific host environment and manage its\nhost instances. React renderers can work in `, React.createElement(MDXTag, {\n      name: \"em\",\n      components: components,\n      parentName: \"p\"\n    }, `mutating`), ` or `, React.createElement(MDXTag, {\n      name: \"em\",\n      components: components,\n      parentName: \"p\"\n    }, `persistent`), ` mode.\nMutating mode is what you'd expect (host instances are completely mutable) and\npersistent mode is for host environments that don’t provide methods like\n`, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `appendChild()`), ` but instead clone the parent tree and always replace the\ntop-level child.`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `In the host environment, a host instance (like a DOM node) is the smallest\nbuilding block. In React, the smallest building block is a `, React.createElement(MDXTag, {\n      name: \"em\",\n      components: components,\n      parentName: \"p\"\n    }, `React element`), `.\nReact element is a plain JavaScript object that can `, React.createElement(MDXTag, {\n      name: \"em\",\n      components: components,\n      parentName: \"p\"\n    }, `describe`), ` a host instance:`), React.createElement(MDXTag, {\n      name: \"pre\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"code\",\n      components: components,\n      parentName: \"pre\",\n      props: {\n        \"className\": \"language-javascript\"\n      }\n    }, `// JSX is a syntax sugar for these objects.\n// <button className=\"blue\" />\n{\n  type: 'button',\n  props: { className: 'blue' }\n}\n`)), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `A React element is lightweight and has no host instance tied to it. Again, it is\nmerely a description of what you want to see on the screen. They are immutable.\nIf you want to render something different later, you will describe it with a new\nReact element tree created from scratch. They are like frames in a movie.`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `Each React renderer has an `, React.createElement(MDXTag, {\n      name: \"em\",\n      components: components,\n      parentName: \"p\"\n    }, `entry point`), `. It’s the API that lets us tell React\nto render a particular React element tree inside a container host instance. For\nexample, in React DOM, `, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `ReactDOM.render`), ` is the entry point:`), React.createElement(MDXTag, {\n      name: \"pre\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"code\",\n      components: components,\n      parentName: \"pre\",\n      props: {\n        \"className\": \"language-jsx\"\n      }\n    }, `ReactDOM.render(\n  // { type: 'button', props: { className: 'blue' } }\n  <button className=\"blue\" />,\n  document.getElementById('container')\n);\n`)), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `React’s job is to make the host tree match the provided React element tree. The\nprocess of figuring out what to do to the host instance tree in response to new\ninformation is sometimes called reconciliation.`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `When `, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `ReactDOM.render`), ` is called is called twice with the same container, React\nneeds to decide when to update the existing host instance to match a the React\nelement, and when to create a new one.`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `An example:`), React.createElement(MDXTag, {\n      name: \"pre\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"code\",\n      components: components,\n      parentName: \"pre\",\n      props: {\n        \"className\": \"language-jsx\"\n      }\n    }, `// let domNode = document.createElement('button');\n// domNode.className = 'blue';\n// domContainer.appendChild(domNode);\nReactDOM.render(\n  <button className=\"blue\" />,\n  document.getElementById('container')\n);\n\n// Can reuse host instance? Yes! (button → button)\n// domNode.className = 'red';\nReactDOM.render(\n  <button className=\"red\" />,\n  document.getElementById('container')\n);\n\n// Can reuse host instance? No! (button → p)\n// domContainer.removeChild(domNode);\n// domNode = document.createElement('p');\n// domNode.textContent = 'Hello';\n// domContainer.appendChild(domNode);\nReactDOM.render(<p>Hello</p>, document.getElementById('container'));\n\n// Can reuse host instance? Yes! (p → p)\n// domNode.textContent = 'Goodbye';\nReactDOM.render(<p>Goodbye</p>, document.getElementById('container'));\n`)), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `This raises a question of identity. The React element may be different every\ntime, but when does it refer to the same host instance conceptually? React is\nquite smart and figures things out most of the time but with dynamic lists, it\nneeds a little help.`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `This is why React nags you to specify a special property called key every time\nyou include an array of elements in your output. A key tells React that it\nshould consider an item to be conceptually the same even if it has different\npositions inside its parent element between renders.`), React.createElement(MDXTag, {\n      name: \"h2\",\n      components: components\n    }, `Gatsby`), React.createElement(MDXTag, {\n      name: \"ul\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"li\",\n      components: components,\n      parentName: \"ul\"\n    }, `Project: build a site `, React.createElement(MDXTag, {\n      name: \"a\",\n      components: components,\n      parentName: \"li\",\n      props: {\n        \"href\": \"https://www.npmjs.com/package/gatsby-source-google-sheets\"\n      }\n    }, `sourcing from google\nsheets`))), React.createElement(MDXTag, {\n      name: \"h2\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"a\",\n      components: components,\n      parentName: \"h2\",\n      props: {\n        \"href\": \"https://github.com/nozzle/react-static\"\n      }\n    }, `React Static`)));\n  }\n\n}\nMDXContent.isMDXComponent = true;"},"headings":[{"value":"React","depth":1},{"value":"React as a UI runtime","depth":2},{"value":"Gatsby","depth":2},{"value":"React Static","depth":2}]}},"pageContext":{"id":"b6e82fcf-7c5f-5a8b-a417-7d87e77751b8"}}